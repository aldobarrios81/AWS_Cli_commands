#!/usr/bin/env bash
set -euo pipefail

# Variables de configuraci√≥n
PROVIDER="AWS"
PRIMARY_REGION="us-east-1"  # Regi√≥n principal donde se centralizar√°n los findings
PROFILE="azbeacons"
AGGREGATOR_NAME="security-hub-aggregator"

# Regiones a incluir en la agregaci√≥n (modifica seg√∫n tus necesidades)
REGIONS=(
    "us-east-1"     # Virginia (Principal)
    "us-west-2"     # Oregon
    "eu-west-1"     # Irlanda
    "ap-southeast-1" # Singapur
    "us-east-2"     # Ohio
    "eu-central-1"  # Frankfurt
)

echo "=== Configurando Agregaciones Cross-Region para Security Hub ==="
echo "Proveedor: $PROVIDER"
echo "Regi√≥n Principal: $PRIMARY_REGION"
echo "Perfil: $PROFILE"
echo "Agregador: $AGGREGATOR_NAME"
echo

# Funci√≥n para verificar si Security Hub est√° habilitado en una regi√≥n
check_security_hub() {
    local region="$1"
    echo "üîç Verificando Security Hub en regi√≥n: $region"
    
    hub_status=$(wsl aws securityhub describe-hub \
        --region "$region" \
        --profile "$PROFILE" \
        --query 'HubArn' \
        --output text 2>/dev/null || echo "NOT_ENABLED")
    
    if [ "$hub_status" != "NOT_ENABLED" ]; then
        echo "  ‚úî Security Hub habilitado: $hub_status"
        return 0
    else
        echo "  ‚ö† Security Hub NO habilitado en $region"
        return 1
    fi
}

# Funci√≥n para habilitar Security Hub en una regi√≥n
enable_security_hub() {
    local region="$1"
    echo "üìù Habilitando Security Hub en regi√≥n: $region"
    
    wsl aws securityhub enable-security-hub \
        --enable-default-standards \
        --region "$region" \
        --profile "$PROFILE" 2>/dev/null && \
    echo "  ‚úî Security Hub habilitado exitosamente en $region" || \
    echo "  ‚ö† No se pudo habilitar Security Hub en $region"
}

# Verificar y habilitar Security Hub en todas las regiones
echo "üåç VERIFICANDO SECURITY HUB EN TODAS LAS REGIONES"
echo "================================================="
enabled_regions=()

for region in "${REGIONS[@]}"; do
    if check_security_hub "$region"; then
        enabled_regions+=("$region")
    else
        echo "  üîß Intentando habilitar Security Hub en $region..."
        enable_security_hub "$region"
        
        # Verificar nuevamente despu√©s de habilitar
        sleep 5
        if check_security_hub "$region"; then
            enabled_regions+=("$region")
        fi
    fi
    echo
done

echo "‚úî Regiones con Security Hub habilitado: ${#enabled_regions[@]}"
echo "  Regiones: ${enabled_regions[*]}"

# Verificar que la regi√≥n principal est√© habilitada
if [[ ! " ${enabled_regions[*]} " =~ " ${PRIMARY_REGION} " ]]; then
    echo "‚ùå Error: Security Hub no est√° habilitado en la regi√≥n principal ($PRIMARY_REGION)"
    echo "   Habilita Security Hub manualmente en $PRIMARY_REGION y ejecuta este script nuevamente"
    exit 1
fi

echo
echo "üîó CONFIGURANDO AGREGACI√ìN CROSS-REGION"
echo "======================================="

# Verificar si ya existe un agregador
echo "Verificando si ya existe un agregador..."
existing_aggregator=$(wsl aws securityhub list-finding-aggregators \
    --region "$PRIMARY_REGION" \
    --profile "$PROFILE" \
    --query "FindingAggregators[?FindingAggregatorArn contains '$AGGREGATOR_NAME'].FindingAggregatorArn" \
    --output text 2>/dev/null || echo "")

if [ -n "$existing_aggregator" ]; then
    echo "‚úî Agregador ya existe: $existing_aggregator"
    AGGREGATOR_ARN="$existing_aggregator"
else
    echo "üìù Creando nuevo agregador de findings..."
    
    # Crear lista de regiones para el agregador (excluyendo la regi√≥n principal)
    aggregated_regions=()
    for region in "${enabled_regions[@]}"; do
        if [ "$region" != "$PRIMARY_REGION" ]; then
            aggregated_regions+=("$region")
        fi
    done
    
    if [ ${#aggregated_regions[@]} -eq 0 ]; then
        echo "‚Ñπ Solo hay Security Hub habilitado en la regi√≥n principal"
        echo "  No es necesario crear agregador para una sola regi√≥n"
        exit 0
    fi
    
    # Convertir array a formato JSON manualmente
    regions_json="["
    for i in "${!aggregated_regions[@]}"; do
        if [ $i -gt 0 ]; then
            regions_json+=","
        fi
        regions_json+="\"${aggregated_regions[i]}\""
    done
    regions_json+="]"
    
    echo "  Regiones a agregar: ${aggregated_regions[*]}"
    
    create_result=$(wsl aws securityhub create-finding-aggregator \
        --region-linking-mode SPECIFIED_REGIONS \
        --regions "$regions_json" \
        --region "$PRIMARY_REGION" \
        --profile "$PROFILE" \
        --output json 2>/dev/null || echo "ERROR")
    
    if [ "$create_result" != "ERROR" ]; then
        AGGREGATOR_ARN=$(echo "$create_result" | grep -o '"FindingAggregatorArn":"[^"]*"' | cut -d'"' -f4)
        echo "‚úî Agregador creado exitosamente: $AGGREGATOR_ARN"
    else
        echo "‚ùå Error al crear el agregador. Verificando permisos y configuraci√≥n..."
        exit 1
    fi
fi

# Verificar el estado del agregador
echo
echo "üìä VERIFICANDO CONFIGURACI√ìN DEL AGREGADOR"
echo "=========================================="
aggregator_details=$(wsl aws securityhub get-finding-aggregator \
    --finding-aggregator-arn "$AGGREGATOR_ARN" \
    --region "$PRIMARY_REGION" \
    --profile "$PROFILE" \
    --output json 2>/dev/null || echo "ERROR")

if [ "$aggregator_details" != "ERROR" ]; then
    echo "‚úî Detalles del agregador:"
    arn=$(echo "$aggregator_details" | grep -o '"FindingAggregatorArn":"[^"]*"' | cut -d'"' -f4)
    mode=$(echo "$aggregator_details" | grep -o '"RegionLinkingMode":"[^"]*"' | cut -d'"' -f4)
    echo "  ‚Ä¢ ARN: $arn"
    echo "  ‚Ä¢ Modo: $mode"
    echo "  ‚Ä¢ Regiones agregadas: ${aggregated_regions[*]}"
else
    echo "‚ö† No se pudieron obtener detalles del agregador"
fi

# Listar findings agregados
echo
echo "üìã VERIFICANDO FINDINGS AGREGADOS"
echo "================================="
echo "Obteniendo muestra de findings agregados..."

findings_sample=$(wsl aws securityhub get-findings \
    --region "$PRIMARY_REGION" \
    --profile "$PROFILE" \
    --max-items 5 \
    --query 'Findings[].{Id:Id,Title:Title,Region:Region,Severity:Severity.Label}' \
    --output table 2>/dev/null || echo "No se pudieron obtener findings")

if [ "$findings_sample" != "No se pudieron obtener findings" ]; then
    echo "$findings_sample"
else
    echo "‚Ñπ No hay findings disponibles o no se pudieron obtener"
fi

# Configurar m√©tricas de CloudWatch
echo
echo "üìà CONFIGURANDO M√âTRICAS DE CLOUDWATCH"
echo "======================================"
echo "Las m√©tricas de Security Hub estar√°n disponibles en:"
echo "‚Ä¢ Namespace: AWS/SecurityHub"
echo "‚Ä¢ Regi√≥n: $PRIMARY_REGION (centralizadas)"
echo "‚Ä¢ M√©tricas por regi√≥n de origen disponibles"

# Mostrar comandos √∫tiles
echo
echo "üîß COMANDOS √öTILES PARA GESTI√ìN"
echo "==============================="
echo
echo "# Listar todos los findings agregados:"
echo "wsl aws securityhub get-findings \\"
echo "    --region $PRIMARY_REGION \\"
echo "    --profile $PROFILE \\"
echo "    --query 'Findings[].{Id:Id,Region:Region,Title:Title,Severity:Severity.Label}' \\"
echo "    --output table"
echo
echo "# Filtrar findings por regi√≥n espec√≠fica:"
echo "wsl aws securityhub get-findings \\"
echo "    --region $PRIMARY_REGION \\"
echo "    --profile $PROFILE \\"
echo "    --filters '{\"Region\":[{\"Value\":\"us-west-2\",\"Comparison\":\"EQUALS\"}]}' \\"
echo "    --query 'Findings[].{Id:Id,Title:Title,Severity:Severity.Label}' \\"
echo "    --output table"
echo
echo "# Filtrar findings por severidad CRITICAL en todas las regiones:"
echo "wsl aws securityhub get-findings \\"
echo "    --region $PRIMARY_REGION \\"
echo "    --profile $PROFILE \\"
echo "    --filters '{\"SeverityLabel\":[{\"Value\":\"CRITICAL\",\"Comparison\":\"EQUALS\"}]}' \\"
echo "    --query 'Findings[].{Id:Id,Region:Region,Title:Title}' \\"
echo "    --output table"
echo
echo "# Ver estado del agregador:"
echo "wsl aws securityhub get-finding-aggregator \\"
echo "    --finding-aggregator-arn '$AGGREGATOR_ARN' \\"
echo "    --region $PRIMARY_REGION \\"
echo "    --profile $PROFILE"
echo
echo "# Listar todos los agregadores:"
echo "wsl aws securityhub list-finding-aggregators \\"
echo "    --region $PRIMARY_REGION \\"
echo "    --profile $PROFILE"

# Configurar insights autom√°ticos
echo
echo "üí° CONFIGURANDO INSIGHTS AUTOM√ÅTICOS"
echo "==================================="
echo "Los siguientes insights estar√°n disponibles autom√°ticamente:"
echo "‚Ä¢ Findings por regi√≥n"
echo "‚Ä¢ Findings por severidad"
echo "‚Ä¢ Findings por tipo de recurso"
echo "‚Ä¢ Trends de findings a lo largo del tiempo"
echo "‚Ä¢ Comparaci√≥n entre regiones"

echo
echo "‚úÖ Agregaci√≥n Cross-Region para Security Hub configurada exitosamente"
echo
echo "CONFIGURACI√ìN COMPLETADA:"
echo "========================"
echo "üè† Regi√≥n Principal: $PRIMARY_REGION"
echo "üîó Agregador ARN: $AGGREGATOR_ARN"
echo "üåç Regiones Agregadas: ${#enabled_regions[@]} regiones"
echo "üìä Dashboard Central: Disponible en $PRIMARY_REGION"
echo
echo "REGIONES INCLUIDAS:"
echo "=================="
for i in "${!enabled_regions[@]}"; do
    region="${enabled_regions[i]}"
    if [ "$region" == "$PRIMARY_REGION" ]; then
        echo "$((i+1)). $region (Principal - Dashboard Central)"
    else
        echo "$((i+1)). $region (Agregada)"
    fi
done

echo
echo "BENEFICIOS DE LA CONFIGURACI√ìN:"
echo "==============================="
echo "‚úî Vista centralizada de findings de todas las regiones"
echo "‚úî Dashboard √∫nico en $PRIMARY_REGION"
echo "‚úî M√©tricas consolidadas en CloudWatch"
echo "‚úî Alertas centralizadas disponibles"
echo "‚úî An√°lisis cross-region de tendencias de seguridad"
echo "‚úî Cumplimiento multi-regi√≥n simplificado"

echo
echo "PR√ìXIMOS PASOS RECOMENDADOS:"
echo "============================"
echo "1. üìä Revisar dashboard central en la consola de Security Hub"
echo "2. üö® Configurar alertas para findings cr√≠ticos cross-region"
echo "3. üìà Crear dashboards personalizados en CloudWatch"
echo "4. üìù Documentar procedimientos de respuesta multi-regi√≥n"
echo "5. üîÑ Programar revisiones regulares del estado de agregaci√≥n"
echo
echo "‚ö†Ô∏è  IMPORTANTE:"
echo "Los findings pueden tardar hasta 5 minutos en aparecer"
echo "en la regi√≥n central despu√©s de ser creados."
echo
echo "=== Proceso completado ==="