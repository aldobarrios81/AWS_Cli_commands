#!/bin/bash

# Configuraci√≥n de Pol√≠ticas de Retenci√≥n para CloudWatch Log Groups
# Este script configura pol√≠ticas de retenci√≥n apropiadas para todos los log groups
# para optimizar costos y cumplir con pol√≠ticas de governance de datos

set -e

PROFILE="azcenit"
REGION="us-east-1"

# Configuraci√≥n de retenci√≥n por defecto (en d√≠as)
DEFAULT_RETENTION_DAYS=30
CRITICAL_RETENTION_DAYS=90    # Para logs cr√≠ticos (VPC, CloudTrail, etc.)
DEBUG_RETENTION_DAYS=7        # Para logs de debug/desarrollo
ARCHIVE_RETENTION_DAYS=365    # Para logs de auditor√≠a/compliance

echo "=================================================================="
echo "üìã CONFIGURANDO RETENCI√ìN DE CLOUDWATCH LOG GROUPS"
echo "=================================================================="
echo "Perfil: $PROFILE | Regi√≥n: $REGION"
echo ""

# Obtener Account ID
ACCOUNT_ID=$(aws sts get-caller-identity --profile $PROFILE --region $REGION --query Account --output text)
echo "Account ID: $ACCOUNT_ID"

echo ""
echo "=== Paso 1: Escaneando CloudWatch Log Groups ==="

# Obtener todos los log groups
log_groups_json=$(aws logs describe-log-groups \
    --profile $PROFILE \
    --region $REGION \
    --query 'logGroups[*].[logGroupName,retentionInDays,storedBytes,creationTime]' \
    --output json)

total_log_groups=$(echo "$log_groups_json" | jq length)

echo "üìä Total de CloudWatch Log Groups encontrados: $total_log_groups"

if [ "$total_log_groups" -eq 0 ]; then
    echo "‚úÖ No hay Log Groups en esta regi√≥n"
    echo ""
    echo "=================================================================="
    echo "üéØ RETENCI√ìN LOG GROUPS - NO HAY LOG GROUPS"
    echo "=================================================================="
    exit 0
fi

echo ""

# Contadores
groups_with_retention=0
groups_without_retention=0
groups_to_update=0
total_stored_bytes=0

echo "üìã INVENTARIO DE LOG GROUPS:"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Arrays para diferentes tipos de logs
declare -A retention_policies

# Procesar cada log group
while IFS= read -r log_group_data; do
    log_group_name=$(echo "$log_group_data" | jq -r '.[0]')
    current_retention=$(echo "$log_group_data" | jq -r '.[1]')
    stored_bytes=$(echo "$log_group_data" | jq -r '.[2]')
    creation_time=$(echo "$log_group_data" | jq -r '.[3]')
    
    # Manejar valores null
    if [ "$current_retention" = "null" ]; then
        current_retention="Never (‚àû)"
        groups_without_retention=$((groups_without_retention + 1))
    else
        groups_with_retention=$((groups_with_retention + 1))
    fi
    
    if [ "$stored_bytes" != "null" ]; then
        total_stored_bytes=$((total_stored_bytes + stored_bytes))
    fi
    
    # Convertir timestamp a fecha legible
    if [ "$creation_time" != "null" ]; then
        creation_date=$(date -d "@$(echo "$creation_time" | cut -d. -f1)" +"%Y-%m-%d" 2>/dev/null || echo "Unknown")
    else
        creation_date="Unknown"
    fi
    
    # Calcular tama√±o en MB
    if [ "$stored_bytes" != "null" ] && [ "$stored_bytes" -gt 0 ]; then
        size_mb=$(awk "BEGIN {printf \"%.2f\", $stored_bytes / 1024 / 1024}")
    else
        size_mb="0.00"
    fi
    
    echo "üìã Log Group: $log_group_name"
    echo "   üìÖ Creado: $creation_date"
    echo "   üíæ Tama√±o: ${size_mb} MB"
    echo "   ‚è∞ Retenci√≥n actual: $current_retention d√≠as"
    
    # Determinar retenci√≥n recomendada basada en el nombre del log group
    recommended_retention=""
    
    case "$log_group_name" in
        *"vpc"*|*"VPC"*|*"flow"*)
            recommended_retention=$CRITICAL_RETENTION_DAYS
            echo "   üîç Tipo: VPC Flow Logs (Cr√≠tico)"
            ;;
        *"cloudtrail"*|*"CloudTrail"*|*"audit"*)
            recommended_retention=$ARCHIVE_RETENTION_DAYS
            echo "   üîç Tipo: CloudTrail/Audit (Archivo)"
            ;;
        *"lambda"*|*"aws/lambda"*)
            recommended_retention=$DEFAULT_RETENTION_DAYS
            echo "   üîç Tipo: AWS Lambda"
            ;;
        *"api-gateway"*|*"aws/apigateway"*)
            recommended_retention=$DEFAULT_RETENTION_DAYS
            echo "   üîç Tipo: API Gateway"
            ;;
        *"ecs"*|*"aws/ecs"*)
            recommended_retention=$DEFAULT_RETENTION_DAYS
            echo "   üîç Tipo: ECS"
            ;;
        *"rds"*|*"aws/rds"*)
            recommended_retention=$CRITICAL_RETENTION_DAYS
            echo "   üîç Tipo: RDS (Cr√≠tico)"
            ;;
        *"debug"*|*"dev"*|*"test"*)
            recommended_retention=$DEBUG_RETENTION_DAYS
            echo "   üîç Tipo: Debug/Development"
            ;;
        *"events"*|*"aws/events"*)
            recommended_retention=$DEFAULT_RETENTION_DAYS
            echo "   üîç Tipo: EventBridge/Events"
            ;;
        *)
            recommended_retention=$DEFAULT_RETENTION_DAYS
            echo "   üîç Tipo: General"
            ;;
    esac
    
    echo "   üí° Retenci√≥n recomendada: $recommended_retention d√≠as"
    
    # Verificar si necesita actualizaci√≥n
    needs_update=false
    if [ "$current_retention" = "Never (‚àû)" ]; then
        needs_update=true
        echo "   ‚ö†Ô∏è  Acci√≥n: Configurar retenci√≥n (actualmente sin l√≠mite)"
    elif [ "$current_retention" != "$recommended_retention" ]; then
        needs_update=true
        echo "   ‚ö†Ô∏è  Acci√≥n: Actualizar retenci√≥n ($current_retention ‚Üí $recommended_retention d√≠as)"
    else
        echo "   ‚úÖ Acci√≥n: Sin cambios necesarios"
    fi
    
    if [ "$needs_update" = true ]; then
        retention_policies["$log_group_name"]=$recommended_retention
        groups_to_update=$((groups_to_update + 1))
    fi
    
    echo ""
done <<< "$(echo "$log_groups_json" | jq -r '.[] | @json')"

# Calcular tama√±o total en GB
total_size_gb=$(awk "BEGIN {printf \"%.2f\", $total_stored_bytes / 1024 / 1024 / 1024}")

echo "üìä RESUMEN DE ESTADO:"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "üìã Total Log Groups: $total_log_groups"
echo "‚úÖ Con retenci√≥n configurada: $groups_with_retention"
echo "‚ö†Ô∏è  Sin retenci√≥n (‚àû): $groups_without_retention"
echo "üîÑ Requieren actualizaci√≥n: $groups_to_update"
echo "üíæ Almacenamiento total: ${total_size_gb} GB"

echo ""
echo "=== Paso 2: Aplicando Pol√≠ticas de Retenci√≥n ==="

if [ "$groups_to_update" -eq 0 ]; then
    echo "‚úÖ Todos los Log Groups ya tienen retenci√≥n apropiada configurada"
else
    echo "üîß Configurando retenci√≥n para $groups_to_update Log Group(s)..."
    echo ""
    
    updated_count=0
    failed_count=0
    
    for log_group_name in "${!retention_policies[@]}"; do
        retention_days=${retention_policies[$log_group_name]}
        
        echo "   üìã Configurando: $log_group_name"
        echo "   ‚è∞ Retenci√≥n: $retention_days d√≠as"
        
        if aws logs put-retention-policy \
            --log-group-name "$log_group_name" \
            --retention-in-days $retention_days \
            --profile $PROFILE \
            --region $REGION 2>/dev/null; then
            
            echo "   ‚úÖ Retenci√≥n configurada exitosamente"
            updated_count=$((updated_count + 1))
        else
            echo "   ‚ùå Error configurando retenci√≥n"
            failed_count=$((failed_count + 1))
        fi
        echo ""
    done
    
    echo "üìä Resultado de actualizaci√≥n:"
    echo "   ‚úÖ Log Groups actualizados: $updated_count"
    if [ "$failed_count" -gt 0 ]; then
        echo "   ‚ùå Log Groups con errores: $failed_count"
    fi
fi

echo ""
echo "=== Paso 3: Configurando Alertas de Costos ==="

echo "üí∞ Configurando alertas para costos de CloudWatch Logs..."

# Crear SNS topic para alertas de costos si no existe
sns_topic_name="cloudwatch-logs-cost-alerts"
existing_topic=$(aws sns list-topics \
    --profile $PROFILE \
    --region $REGION \
    --query "Topics[?contains(TopicArn, '$sns_topic_name')].TopicArn" \
    --output text)

if [ -z "$existing_topic" ]; then
    echo "üìß Creando SNS Topic para alertas de costos: $sns_topic_name"
    
    topic_arn=$(aws sns create-topic \
        --name "$sns_topic_name" \
        --profile $PROFILE \
        --region $REGION \
        --query 'TopicArn' \
        --output text)
    
    echo "‚úÖ SNS Topic creado: $topic_arn"
else
    topic_arn="$existing_topic"
    echo "‚úÖ Usando SNS Topic existente: $topic_arn"
fi

# Crear m√©trica personalizada para monitorear logs ingestion
echo ""
echo "üìä Configurando m√©trica de monitoreo de ingesta de logs..."

# Crear alarma para ingesta alta de logs (>1GB por d√≠a)
aws cloudwatch put-metric-alarm \
    --alarm-name "HighLogIngestion-CloudWatchLogs" \
    --alarm-description "High log ingestion rate in CloudWatch Logs" \
    --metric-name "IncomingLogEvents" \
    --namespace "AWS/Logs" \
    --statistic Sum \
    --period 86400 \
    --threshold 1000000 \
    --comparison-operator GreaterThanThreshold \
    --evaluation-periods 1 \
    --alarm-actions "$topic_arn" \
    --profile $PROFILE \
    --region $REGION 2>/dev/null || echo "‚ö†Ô∏è  Alarma ya existe o error en configuraci√≥n"

echo "üö® Alarma de ingesta configurada"

echo ""
echo "=== Paso 4: An√°lisis de Optimizaci√≥n ==="

echo "üîç Analizando oportunidades de optimizaci√≥n de costos..."

# Calcular ahorro estimado
estimated_monthly_savings=0

if [ "$groups_without_retention" -gt 0 ]; then
    # Estimaci√≥n: logs sin retenci√≥n pueden crecer indefinidamente
    # Asumiendo ~$0.50 per GB stored por mes
    potential_monthly_cost=$(awk "BEGIN {printf \"%.2f\", $total_size_gb * 0.50}")
    estimated_monthly_savings=$(awk "BEGIN {printf \"%.2f\", $potential_monthly_cost * 0.3}")  # 30% de ahorro estimado
fi

echo ""
echo "üìä AN√ÅLISIS DE OPTIMIZACI√ìN:"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "üíæ Almacenamiento actual: ${total_size_gb} GB"
echo "‚ö†Ô∏è  Log Groups sin retenci√≥n: $groups_without_retention"
echo "üí∞ Costo mensual estimado actual: ~\$$(awk "BEGIN {printf \"%.2f\", $total_size_gb * 0.50}") USD"
if [ "$groups_without_retention" -gt 0 ]; then
    echo "üíö Ahorro mensual estimado: ~\$${estimated_monthly_savings} USD"
fi

echo ""
echo "=== Paso 5: Verificaci√≥n Final ==="

echo "üîç Verificando configuraci√≥n final..."

# Verificar estado despu√©s de los cambios
final_check=$(aws logs describe-log-groups \
    --profile $PROFILE \
    --region $REGION \
    --query 'logGroups[*].[logGroupName,retentionInDays]' \
    --output json)

final_with_retention=0
final_without_retention=0

while IFS= read -r log_group_data; do
    current_retention=$(echo "$log_group_data" | jq -r '.[1]')
    
    if [ "$current_retention" = "null" ]; then
        final_without_retention=$((final_without_retention + 1))
    else
        final_with_retention=$((final_with_retention + 1))
    fi
done <<< "$(echo "$final_check" | jq -r '.[] | @json')"

echo ""
echo "üìä ESTADO FINAL:"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "‚úÖ Log Groups con retenci√≥n: $final_with_retention"
echo "‚ö†Ô∏è  Log Groups sin retenci√≥n: $final_without_retention"

compliance_percentage=$(awk "BEGIN {printf \"%.1f\", ($final_with_retention / $total_log_groups) * 100}")
echo "üìà Compliance de retenci√≥n: ${compliance_percentage}%"

echo ""
echo "=================================================================="
echo "‚úÖ CONFIGURACI√ìN COMPLETADA - RETENCI√ìN CLOUDWATCH LOGS"
echo "=================================================================="
echo ""

echo "üìã RESUMEN DE CONFIGURACI√ìN:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üè¢ Account ID: $ACCOUNT_ID"
echo "üåç Regi√≥n: $REGION"
echo "üìã Total Log Groups: $total_log_groups"
echo "üîÑ Log Groups actualizados: $updated_count"
echo "üìà Compliance final: ${compliance_percentage}%"
echo "üíæ Almacenamiento total: ${total_size_gb} GB"
echo "üìß SNS Topic alertas: $topic_arn"

echo ""
echo "üéØ POL√çTICAS DE RETENCI√ìN APLICADAS:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üîç VPC Flow Logs / Cr√≠ticos: $CRITICAL_RETENTION_DAYS d√≠as"
echo "üìö CloudTrail / Auditor√≠a: $ARCHIVE_RETENTION_DAYS d√≠as"
echo "‚öôÔ∏è  Lambda / API Gateway / General: $DEFAULT_RETENTION_DAYS d√≠as"
echo "üõ†Ô∏è  Debug / Development: $DEBUG_RETENTION_DAYS d√≠as"

echo ""
echo "üí∞ OPTIMIZACI√ìN DE COSTOS:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚Ä¢ Retenci√≥n configurada previene crecimiento descontrolado"
echo "‚Ä¢ Logs antiguos se eliminan autom√°ticamente"
echo "‚Ä¢ Reducci√≥n de costos de almacenamiento a largo plazo"
if [ "$groups_without_retention" -gt 0 ]; then
    echo "‚Ä¢ Ahorro estimado: ~\$${estimated_monthly_savings}/mes"
fi

echo ""
echo "üìä COMANDOS DE MONITOREO:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "# Ver todos los log groups con retenci√≥n:"
echo "aws logs describe-log-groups --query 'logGroups[*].[logGroupName,retentionInDays]' --profile $PROFILE --region $REGION --output table"
echo ""
echo "# Ver log groups sin retenci√≥n:"
echo "aws logs describe-log-groups --query 'logGroups[?retentionInDays==null].[logGroupName]' --profile $PROFILE --region $REGION --output text"
echo ""
echo "# Ver uso de almacenamiento:"
echo "aws logs describe-log-groups --query 'logGroups[*].[logGroupName,storedBytes]' --profile $PROFILE --region $REGION --output table"

echo ""
echo "üìß CONFIGURACI√ìN DE ALERTAS:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "Para recibir alertas de costos por email:"
echo "aws sns subscribe \\"
echo "    --topic-arn $topic_arn \\"
echo "    --protocol email \\"
echo "    --notification-endpoint su-email@dominio.com \\"
echo "    --profile $PROFILE --region $REGION"

echo ""
echo "‚ö†Ô∏è  MEJORES PR√ÅCTICAS:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚Ä¢ Revisar pol√≠ticas de retenci√≥n trimestralmente"
echo "‚Ä¢ Ajustar retenci√≥n seg√∫n requisitos de compliance"
echo "‚Ä¢ Monitorear costos de CloudWatch Logs regularmente"
echo "‚Ä¢ Configurar log level apropiado en aplicaciones"
echo "‚Ä¢ Usar log sampling para aplicaciones de alto volumen"
echo "‚Ä¢ Exportar logs cr√≠ticos a S3 para almacenamiento a largo plazo"

echo ""
echo "üîç PR√ìXIMOS PASOS RECOMENDADOS:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "1. Configurar suscripciones SNS para alertas de costos"
echo "2. Implementar exportaci√≥n autom√°tica a S3 para logs de auditor√≠a"
echo "3. Configurar filtros de m√©tricas para an√°lisis espec√≠ficos"
echo "4. Establecer dashboards CloudWatch para monitoreo visual"
echo "5. Revisar y ajustar log levels en aplicaciones"

echo ""
echo "=================================================================="
echo "üéâ RETENCI√ìN CLOUDWATCH LOGS - CONFIGURACI√ìN EXITOSA"
echo "=================================================================="