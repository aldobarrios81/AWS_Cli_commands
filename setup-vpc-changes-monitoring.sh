#!/bin/bash
# setup-vpc-changes-monitoring.sh
# Configurar monitoring para cambios en VPC
# Regla de seguridad CIS AWS: Configure log metric filter and alarm for VPC changes
# Uso: ./setup-vpc-changes-monitoring.sh [perfil]

# Verificar par√°metros
if [ $# -eq 0 ]; then
    echo "Uso: $0 [perfil]"
    echo "Perfiles disponibles: ancla, azbeacons, azcenit"
    exit 1
fi

# Configuraci√≥n del perfil
PROFILE="$1"
REGION="us-east-1"
METRIC_NAMESPACE="CISBenchmark"
METRIC_NAME="VpcChanges"
FILTER_NAME="CIS-VpcChanges"
ALARM_PREFIX="CIS-VpcChanges"
SNS_TOPIC_NAME="cis-security-alerts"
EMAIL="felipe.castillo@azlogica.com"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo "=================================================================="
echo -e "${BLUE}üîí IMPLEMENTANDO MONITORING PARA VPC CHANGES${NC}"
echo "=================================================================="
echo -e "Perfil: ${GREEN}$PROFILE${NC} | Regi√≥n: ${GREEN}$REGION${NC}"
echo "Regla: Configure log metric filter and alarm for VPC changes"
echo ""

# Verificar prerrequisitos
echo -e "${PURPLE}üîç Verificando prerrequisitos...${NC}"

# Verificar AWS CLI
if ! command -v aws &> /dev/null; then
    echo -e "${RED}‚ùå AWS CLI no est√° instalado${NC}"
    exit 1
fi

AWS_VERSION=$(aws --version 2>&1)
echo -e "‚úÖ AWS CLI encontrado: ${GREEN}$AWS_VERSION${NC}"

# Verificar credenciales
echo -e "${PURPLE}üîê Verificando credenciales para perfil '$PROFILE'...${NC}"
ACCOUNT_ID=$(aws sts get-caller-identity --profile "$PROFILE" --query Account --output text 2>/dev/null)

if [ $? -ne 0 ] || [ -z "$ACCOUNT_ID" ]; then
    echo -e "${RED}‚ùå Error: No se pudo verificar las credenciales para el perfil '$PROFILE'${NC}"
    echo -e "${YELLOW}üí° Verifica que el perfil est√© configurado correctamente${NC}"
    exit 1
fi

echo -e "‚úÖ Account ID: ${GREEN}$ACCOUNT_ID${NC}"
echo ""

# Patr√≥n de filtro para cambios en VPC
# Monitorea eventos cr√≠ticos de VPC
FILTER_PATTERN='{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachVpnGateway) || ($.eventName = DetachVpnGateway) || ($.eventName = CreateVpnConnection) || ($.eventName = DeleteVpnConnection) || ($.eventName = CreateVpnGateway) || ($.eventName = DeleteVpnGateway) || ($.eventName = AssociateDhcpOptions) || ($.eventName = CreateDhcpOptions) || ($.eventName = DeleteDhcpOptions) || ($.eventName = AssociateVpcCidrBlock) || ($.eventName = DisassociateVpcCidrBlock) }'

echo -e "${BLUE}üìã Patr√≥n de filtro configurado:${NC}"
echo -e "${YELLOW}Eventos monitoreados:${NC}"
echo "   ‚Ä¢ CreateVpc - Creaci√≥n de VPC"
echo "   ‚Ä¢ DeleteVpc - Eliminaci√≥n de VPC"
echo "   ‚Ä¢ ModifyVpcAttribute - Modificaci√≥n de atributos VPC"
echo "   ‚Ä¢ VPC Peering (Create/Delete/Accept/Reject)"
echo "   ‚Ä¢ VPN Gateway operations (Attach/Detach/Create/Delete)"
echo "   ‚Ä¢ VPN Connection operations (Create/Delete)"
echo "   ‚Ä¢ DHCP Options (Associate/Create/Delete)"
echo "   ‚Ä¢ VPC CIDR Block (Associate/Disassociate)"
echo ""

# Paso 1: Configurar SNS Topic
echo -e "${PURPLE}=== Paso 1: Configurando SNS Topic ===${NC}"

# Verificar si el SNS topic existe
SNS_TOPIC_ARN=$(aws sns list-topics --profile "$PROFILE" --region "$REGION" --query "Topics[?contains(TopicArn, '$SNS_TOPIC_NAME')].TopicArn" --output text 2>/dev/null)

if [ -z "$SNS_TOPIC_ARN" ]; then
    echo -e "${YELLOW}üìù Creando SNS Topic: $SNS_TOPIC_NAME${NC}"
    SNS_TOPIC_ARN=$(aws sns create-topic --name "$SNS_TOPIC_NAME" --profile "$PROFILE" --region "$REGION" --query TopicArn --output text 2>/dev/null)
    
    if [ $? -ne 0 ] || [ -z "$SNS_TOPIC_ARN" ]; then
        echo -e "${RED}‚ùå Error creando SNS Topic${NC}"
        exit 1
    fi
    
    echo -e "‚úÖ SNS Topic creado: ${GREEN}$SNS_TOPIC_ARN${NC}"
else
    echo -e "‚úÖ SNS Topic existente: ${GREEN}$SNS_TOPIC_ARN${NC}"
fi

# Configurar suscripci√≥n de email
echo -e "${BLUE}üì¨ Configurando suscripci√≥n de email...${NC}"

# Verificar si ya existe la suscripci√≥n
EXISTING_SUBSCRIPTION=$(aws sns list-subscriptions-by-topic --topic-arn "$SNS_TOPIC_ARN" --profile "$PROFILE" --region "$REGION" --query "Subscriptions[?Endpoint=='$EMAIL' && Protocol=='email'].SubscriptionArn" --output text 2>/dev/null)

if [ -z "$EXISTING_SUBSCRIPTION" ] || [ "$EXISTING_SUBSCRIPTION" == "None" ]; then
    echo -e "   üìß Creando suscripci√≥n para: ${BLUE}$EMAIL${NC}"
    aws sns subscribe --topic-arn "$SNS_TOPIC_ARN" --protocol email --notification-endpoint "$EMAIL" --profile "$PROFILE" --region "$REGION" >/dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo -e "   ‚úÖ Suscripci√≥n creada exitosamente"
        echo -e "   ${YELLOW}‚ö†Ô∏è Revisa tu email para confirmar la suscripci√≥n${NC}"
    else
        echo -e "   ${RED}‚ùå Error creando suscripci√≥n${NC}"
    fi
else
    echo -e "   ‚úÖ Suscripci√≥n de email ya existe para: ${BLUE}$EMAIL${NC}"
    
    # Verificar estado de la suscripci√≥n
    SUBSCRIPTION_STATUS=$(aws sns get-subscription-attributes --subscription-arn "$EXISTING_SUBSCRIPTION" --profile "$PROFILE" --region "$REGION" --query 'Attributes.PendingConfirmation' --output text 2>/dev/null)
    
    if [ "$SUBSCRIPTION_STATUS" == "true" ]; then
        echo -e "   ${YELLOW}‚ö†Ô∏è Suscripci√≥n pendiente de confirmaci√≥n${NC}"
    else
        echo -e "   ‚úÖ Suscripci√≥n confirmada y activa"
    fi
fi

echo ""

# Paso 2: Verificar VPCs existentes
echo -e "${PURPLE}=== Paso 2: Verificando VPCs existentes ===${NC}"

# Contar VPCs
VPC_COUNT=$(aws ec2 describe-vpcs --profile "$PROFILE" --region "$REGION" --query 'length(Vpcs)' --output text 2>/dev/null)

if [ -z "$VPC_COUNT" ] || [ "$VPC_COUNT" -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è No se encontraron VPCs en la cuenta${NC}"
else
    echo -e "‚úÖ VPCs encontradas en la cuenta: ${GREEN}$VPC_COUNT VPCs${NC}"
    echo -e "${BLUE}üìã Estas VPCs ser√°n monitoreadas por cambios${NC}"
    
    # Mostrar informaci√≥n b√°sica de VPCs
    echo -e "${BLUE}üìÑ Resumen de VPCs (primeros 5):${NC}"
    aws ec2 describe-vpcs --profile "$PROFILE" --region "$REGION" --query 'Vpcs[0:4].[VpcId,State,CidrBlock,Tags[?Key==`Name`].Value | [0]]' --output table 2>/dev/null
    
    # Estad√≠sticas adicionales
    echo -e "${BLUE}üåê An√°lisis de VPCs:${NC}"
    
    # VPCs por estado
    AVAILABLE_VPCS=$(aws ec2 describe-vpcs --profile "$PROFILE" --region "$REGION" --filters "Name=state,Values=available" --query 'length(Vpcs)' --output text 2>/dev/null)
    echo -e "   üìä VPCs disponibles: ${GREEN}$AVAILABLE_VPCS${NC}"
    
    # VPC por defecto
    DEFAULT_VPC=$(aws ec2 describe-vpcs --profile "$PROFILE" --region "$REGION" --filters "Name=is-default,Values=true" --query 'length(Vpcs)' --output text 2>/dev/null)
    echo -e "   üìä VPC por defecto: ${GREEN}$DEFAULT_VPC${NC}"
    
    # An√°lisis de CIDR blocks
    echo -e "   üìä Rangos CIDR configurados:"
    aws ec2 describe-vpcs --profile "$PROFILE" --region "$REGION" --query 'Vpcs[].CidrBlock' --output text 2>/dev/null | sort | uniq -c | while read count cidr; do
        echo -e "      üìå $cidr: ${BLUE}$count VPC(s)${NC}"
    done
    
    # Verificar VPC Peering
    PEERING_COUNT=$(aws ec2 describe-vpc-peering-connections --profile "$PROFILE" --region "$REGION" --query 'length(VpcPeeringConnections)' --output text 2>/dev/null)
    echo -e "   üìä VPC Peering Connections: ${GREEN}$PEERING_COUNT${NC}"
    
    # Verificar VPN Gateways
    VGW_COUNT=$(aws ec2 describe-vpn-gateways --profile "$PROFILE" --region "$REGION" --query 'length(VpnGateways)' --output text 2>/dev/null)
    echo -e "   üìä VPN Gateways: ${GREEN}$VGW_COUNT${NC}"
    
    # Verificar DHCP Options
    DHCP_COUNT=$(aws ec2 describe-dhcp-options --profile "$PROFILE" --region "$REGION" --query 'length(DhcpOptions)' --output text 2>/dev/null)
    echo -e "   üìä DHCP Options Sets: ${GREEN}$DHCP_COUNT${NC}"
fi

echo ""

# Paso 3: Configurar CloudTrail Log Groups
echo -e "${PURPLE}=== Paso 3: Configurando Metric Filters ===${NC}"

# Buscar CloudTrail log groups
LOG_GROUPS=$(aws logs describe-log-groups --profile "$PROFILE" --region "$REGION" --query 'logGroups[?contains(logGroupName, `cloudtrail`) || contains(logGroupName, `CloudTrail`)].logGroupName' --output text 2>/dev/null)

if [ -z "$LOG_GROUPS" ]; then
    echo -e "${RED}‚ùå No se encontraron CloudTrail Log Groups${NC}"
    echo -e "${YELLOW}üí° Aseg√∫rate de tener CloudTrail configurado con CloudWatch Logs${NC}"
    exit 1
fi

echo -e "‚úÖ CloudTrail Log Groups encontrados:"
for log_group in $LOG_GROUPS; do
    echo -e "   üìÑ $log_group"
done
echo ""

# Configurar metric filters para cada log group
FILTERS_CREATED=0

for LOG_GROUP in $LOG_GROUPS; do
    echo -e "${BLUE}üîß Configurando metric filter para: $LOG_GROUP${NC}"
    
    # Crear nombre √∫nico para el filtro basado en el log group
    CLEAN_LOG_GROUP=$(echo "$LOG_GROUP" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
    UNIQUE_FILTER_NAME="$FILTER_NAME-$CLEAN_LOG_GROUP"
    
    # Verificar si el metric filter ya existe
    EXISTING_FILTER=$(aws logs describe-metric-filters --log-group-name "$LOG_GROUP" --filter-name-prefix "$FILTER_NAME" --profile "$PROFILE" --region "$REGION" --query 'metricFilters[0].filterName' --output text 2>/dev/null)
    
    if [ "$EXISTING_FILTER" != "None" ] && [ -n "$EXISTING_FILTER" ]; then
        echo -e "   ‚úÖ Metric filter ya existe: ${GREEN}$EXISTING_FILTER${NC}"
    else
        echo -e "   üìù Creando metric filter: $UNIQUE_FILTER_NAME"
        
        # Crear metric filter
        aws logs put-metric-filter \
            --log-group-name "$LOG_GROUP" \
            --filter-name "$UNIQUE_FILTER_NAME" \
            --filter-pattern "$FILTER_PATTERN" \
            --metric-transformations \
                metricName="$METRIC_NAME",metricNamespace="$METRIC_NAMESPACE",metricValue="1",defaultValue=0 \
            --profile "$PROFILE" \
            --region "$REGION" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            echo -e "   ‚úÖ Metric filter creado exitosamente"
            FILTERS_CREATED=$((FILTERS_CREATED + 1))
        else
            echo -e "   ${RED}‚ùå Error creando metric filter${NC}"
            continue
        fi
    fi
done

echo ""

# Paso 4: Configurar CloudWatch Alarms
echo -e "${PURPLE}=== Paso 4: Configurando CloudWatch Alarms ===${NC}"

ALARMS_CREATED=0

for LOG_GROUP in $LOG_GROUPS; do
    echo -e "${BLUE}‚è∞ Configurando alarma para: $LOG_GROUP${NC}"
    
    # Crear nombre √∫nico para la alarma
    CLEAN_LOG_GROUP=$(echo "$LOG_GROUP" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
    UNIQUE_ALARM_NAME="$ALARM_PREFIX-$CLEAN_LOG_GROUP"
    
    # Verificar si la alarma ya existe
    EXISTING_ALARM=$(aws cloudwatch describe-alarms --alarm-names "$UNIQUE_ALARM_NAME" --profile "$PROFILE" --region "$REGION" --query 'MetricAlarms[0].AlarmName' --output text 2>/dev/null)
    
    if [ "$EXISTING_ALARM" != "None" ] && [ -n "$EXISTING_ALARM" ]; then
        echo -e "   ‚úÖ CloudWatch Alarm ya existe: ${GREEN}$EXISTING_ALARM${NC}"
    else
        echo -e "   üìù Creando CloudWatch Alarm: $UNIQUE_ALARM_NAME"
        
        # Crear alarma
        aws cloudwatch put-metric-alarm \
            --alarm-name "$UNIQUE_ALARM_NAME" \
            --alarm-description "CIS - VPC Changes Detected in $LOG_GROUP" \
            --actions-enabled \
            --alarm-actions "$SNS_TOPIC_ARN" \
            --metric-name "$METRIC_NAME" \
            --namespace "$METRIC_NAMESPACE" \
            --statistic Sum \
            --period 300 \
            --threshold 1 \
            --comparison-operator GreaterThanOrEqualToThreshold \
            --datapoints-to-alarm 1 \
            --evaluation-periods 1 \
            --treat-missing-data notBreaching \
            --profile "$PROFILE" \
            --region "$REGION" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            echo -e "   ‚úÖ CloudWatch Alarm creada exitosamente"
            ALARMS_CREATED=$((ALARMS_CREATED + 1))
        else
            echo -e "   ${RED}‚ùå Error creando CloudWatch Alarm${NC}"
        fi
    fi
done

echo ""

# Resumen final
echo -e "${PURPLE}=== RESUMEN DE CONFIGURACI√ìN ===${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo -e "üîê Account ID: ${GREEN}$ACCOUNT_ID${NC}"
echo -e "üìß SNS Topic: ${GREEN}$SNS_TOPIC_ARN${NC}"
echo -e "üìä VPCs monitoreadas: ${GREEN}$VPC_COUNT${NC}"
echo -e "üìã CloudTrail Log Groups: ${GREEN}$(echo $LOG_GROUPS | wc -w)${NC}"
echo -e "üîß Metric Filters creados: ${GREEN}$FILTERS_CREATED${NC}"
echo -e "‚è∞ CloudWatch Alarms creadas: ${GREEN}$ALARMS_CREATED${NC}"

echo ""
echo -e "${GREEN}üéâ CONFIGURACI√ìN COMPLETADA${NC}"
echo -e "${BLUE}üí° VPC Changes Monitoring est√° ahora activo${NC}"
echo ""

echo -e "${YELLOW}üìã EVENTOS QUE ACTIVAR√ÅN ALERTAS:${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üèóÔ∏è  VPC Lifecycle:"
echo "   ‚Ä¢ CreateVpc - Creaci√≥n de nueva VPC"
echo "   ‚Ä¢ DeleteVpc - Eliminaci√≥n de VPC"
echo "   ‚Ä¢ ModifyVpcAttribute - Cambios en atributos (DNS, DHCP, etc.)"
echo ""
echo "üîó VPC Peering:"
echo "   ‚Ä¢ CreateVpcPeeringConnection - Nueva conexi√≥n peering"
echo "   ‚Ä¢ AcceptVpcPeeringConnection - Aceptaci√≥n de peering"
echo "   ‚Ä¢ RejectVpcPeeringConnection - Rechazo de peering"
echo "   ‚Ä¢ DeleteVpcPeeringConnection - Eliminaci√≥n de peering"
echo ""
echo "üåê VPN Connectivity:"
echo "   ‚Ä¢ CreateVpnConnection/DeleteVpnConnection - Conexiones VPN"
echo "   ‚Ä¢ CreateVpnGateway/DeleteVpnGateway - Gateways VPN"
echo "   ‚Ä¢ AttachVpnGateway/DetachVpnGateway - Asociaciones VPN"
echo ""
echo "‚öôÔ∏è  Network Configuration:"
echo "   ‚Ä¢ AssociateDhcpOptions - Cambios en opciones DHCP"
echo "   ‚Ä¢ CreateDhcpOptions/DeleteDhcpOptions - Gesti√≥n DHCP"
echo "   ‚Ä¢ AssociateVpcCidrBlock/DisassociateVpcCidrBlock - CIDR blocks"
echo ""

echo -e "${BLUE}üìã PR√ìXIMOS PASOS:${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "1. Confirmar suscripci√≥n de email si est√° pendiente"
echo "2. Probar las notificaciones con un evento de prueba"
echo "3. Establecer procedimientos de respuesta a cambios de VPC"
echo "4. Revisar configuraciones cr√≠ticas de VPC regularmente"
echo "5. Documentar la configuraci√≥n para el equipo de seguridad"
echo "6. Considerar alertas adicionales para recursos VPC espec√≠ficos"