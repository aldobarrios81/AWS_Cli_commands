#!/bin/bash
# verify-kms-cmk-actions-monitoring.sh
# Verificar configuraci√≥n de monitoring para acciones KMS CMK
# Regla de seguridad CIS AWS: 3.7 - Monitor KMS Customer Master Key actions

# Configuraci√≥n para perfil azcenit
PROFILE="azcenit"
REGION="us-east-1"
METRIC_NAMESPACE="CISBenchmark"
METRIC_NAME="KMSCMKActions"
FILTER_NAME="CIS-KMSCMKActions"
ALARM_PREFIX="CIS-3.7-KMSCMKActions"
SNS_TOPIC_NAME="cis-security-alerts"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo "=================================================================="
echo -e "${BLUE}üîç VERIFICANDO CIS 3.7 - KMS CMK ACTIONS MONITORING${NC}"
echo "=================================================================="
echo "Perfil: $PROFILE | Regi√≥n: $REGION"
echo "Verificando configuraci√≥n de monitoreo para acciones KMS CMK"
echo ""

# Obtener Account ID
ACCOUNT_ID=$(aws sts get-caller-identity --profile "$PROFILE" --region "$REGION" --query 'Account' --output text 2>/dev/null)
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå ERROR: No se puede obtener el Account ID${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Account ID: $ACCOUNT_ID${NC}"
echo ""

# Verificar SNS Topic
echo "=== Verificando SNS Topic ==="
SNS_TOPIC_ARN=$(aws sns list-topics \
    --profile "$PROFILE" --region "$REGION" \
    --query "Topics[?contains(TopicArn, '$SNS_TOPIC_NAME')].TopicArn" \
    --output text 2>/dev/null)

if [ -z "$SNS_TOPIC_ARN" ] || [ "$SNS_TOPIC_ARN" = "None" ]; then
    echo -e "${RED}‚ùå SNS Topic '$SNS_TOPIC_NAME' no encontrado${NC}"
    SNS_STATUS="‚ùå No configurado"
else
    echo -e "${GREEN}‚úÖ SNS Topic encontrado: $(basename $SNS_TOPIC_ARN)${NC}"
    echo "   ARN: $SNS_TOPIC_ARN"
    
    # Verificar suscripciones
    SUBSCRIPTIONS=$(aws sns list-subscriptions-by-topic \
        --topic-arn "$SNS_TOPIC_ARN" \
        --profile "$PROFILE" \
        --region "$REGION" \
        --query 'Subscriptions[].{Protocol:Protocol,Endpoint:Endpoint,Status:SubscriptionArn}' \
        --output table 2>/dev/null)
    
    if [ ! -z "$SUBSCRIPTIONS" ]; then
        echo -e "${BLUE}üìß Suscripciones configuradas:${NC}"
        echo "$SUBSCRIPTIONS"
        SNS_STATUS="‚úÖ Configurado con suscripciones"
    else
        echo -e "${YELLOW}‚ö†Ô∏è SNS Topic existe pero sin suscripciones${NC}"
        SNS_STATUS="‚ö†Ô∏è Sin suscripciones"
    fi
fi
echo ""

# Verificar KMS Keys
echo "=== Verificando KMS Keys en la cuenta ==="
KMS_KEYS_COUNT=$(aws kms list-keys \
    --profile "$PROFILE" --region "$REGION" \
    --query 'Keys[].KeyId' \
    --output text 2>/dev/null | wc -w)

if [ $? -eq 0 ] && [ "$KMS_KEYS_COUNT" -gt 0 ]; then
    echo -e "${GREEN}‚úÖ KMS Keys encontradas: $KMS_KEYS_COUNT keys${NC}"
    
    # Mostrar algunas keys de ejemplo (primeras 3)
    SAMPLE_KEYS=$(aws kms list-keys \
        --profile "$PROFILE" --region "$REGION" \
        --query 'Keys[0:3].KeyId' \
        --output text 2>/dev/null)
    
    echo -e "${BLUE}üìã Ejemplos de Keys (primeras 3):${NC}"
    for key in $SAMPLE_KEYS; do
        # Obtener informaci√≥n del key
        KEY_INFO=$(aws kms describe-key \
            --key-id "$key" \
            --profile "$PROFILE" \
            --region "$REGION" \
            --query 'KeyMetadata.{Description:Description,KeyUsage:KeyUsage,Enabled:Enabled}' \
            --output json 2>/dev/null)
        
        if [ ! -z "$KEY_INFO" ] && [ "$KEY_INFO" != "null" ]; then
            KEY_DESC=$(echo $KEY_INFO | jq -r '.Description // "Sin descripci√≥n"' 2>/dev/null)
            KEY_USAGE=$(echo $KEY_INFO | jq -r '.KeyUsage // "N/A"' 2>/dev/null)
            KEY_ENABLED=$(echo $KEY_INFO | jq -r '.Enabled // false' 2>/dev/null)
            
            if [ "$KEY_ENABLED" = "true" ]; then
                STATUS_ICON="‚úÖ"
            else
                STATUS_ICON="‚ö†Ô∏è"
            fi
            
            echo "   $STATUS_ICON $key ($KEY_USAGE) - $KEY_DESC"
        else
            echo "   üìÑ $key"
        fi
    done
    
    KMS_STATUS="‚úÖ Keys disponibles para monitoreo"
else
    echo -e "${YELLOW}‚ö†Ô∏è No se encontraron KMS Keys o sin permisos para listarlas${NC}"
    echo -e "${BLUE}üí° El monitoreo funcionar√° cuando se creen KMS Keys${NC}"
    KMS_STATUS="‚ö†Ô∏è Sin keys o sin permisos"
fi
echo ""

# Buscar CloudTrail Log Groups
echo "=== Verificando CloudTrail Log Groups y Metric Filters ==="

CLOUDTRAIL_LOG_GROUPS=$(aws logs describe-log-groups \
    --profile "$PROFILE" --region "$REGION" \
    --query 'logGroups[?contains(logGroupName, `cloudtrail`) || contains(logGroupName, `CloudTrail`) || contains(logGroupName, `trail`)].logGroupName' \
    --output text 2>/dev/null)

if [ -z "$CLOUDTRAIL_LOG_GROUPS" ] || [ "$CLOUDTRAIL_LOG_GROUPS" = "None" ]; then
    echo -e "${RED}‚ùå No se encontraron log groups de CloudTrail${NC}"
    FILTERS_STATUS="‚ùå No hay log groups"
else
    echo -e "${GREEN}‚úÖ CloudTrail Log Groups encontrados:${NC}"
    
    TOTAL_FILTERS=0
    CONFIGURED_FILTERS=0
    
    for LOG_GROUP in $CLOUDTRAIL_LOG_GROUPS; do
        echo "   üìÑ $LOG_GROUP"
        TOTAL_FILTERS=$((TOTAL_FILTERS + 1))
        
        # Verificar metric filter
        FILTER_INFO=$(aws logs describe-metric-filters \
            --log-group-name "$LOG_GROUP" \
            --filter-name-prefix "$FILTER_NAME" \
            --profile "$PROFILE" \
            --region "$REGION" \
            --query 'metricFilters[0].{Name:filterName,Pattern:filterPattern}' \
            --output json 2>/dev/null)
        
        if [ "$FILTER_INFO" != "null" ] && [ ! -z "$FILTER_INFO" ]; then
            echo -e "${GREEN}     ‚úÖ Metric Filter configurado: $FILTER_NAME${NC}"
            CONFIGURED_FILTERS=$((CONFIGURED_FILTERS + 1))
            
            # Mostrar patr√≥n del filtro (truncado)
            PATTERN=$(echo $FILTER_INFO | jq -r '.Pattern' 2>/dev/null | cut -c1-80)
            echo "     üìã Patr√≥n: ${PATTERN}..."
        else
            echo -e "${RED}     ‚ùå Metric Filter NO configurado${NC}"
        fi
    done
    
    if [ $CONFIGURED_FILTERS -eq $TOTAL_FILTERS ]; then
        FILTERS_STATUS="‚úÖ Todos configurados ($CONFIGURED_FILTERS/$TOTAL_FILTERS)"
    elif [ $CONFIGURED_FILTERS -gt 0 ]; then
        FILTERS_STATUS="‚ö†Ô∏è Parcialmente configurados ($CONFIGURED_FILTERS/$TOTAL_FILTERS)"
    else
        FILTERS_STATUS="‚ùå Ninguno configurado (0/$TOTAL_FILTERS)"
    fi
fi
echo ""

# Verificar CloudWatch Alarms
echo "=== Verificando CloudWatch Alarms ==="

ALARMS=$(aws cloudwatch describe-alarms \
    --alarm-name-prefix "$ALARM_PREFIX" \
    --profile "$PROFILE" \
    --region "$REGION" \
    --query 'MetricAlarms[].{Name:AlarmName,State:StateValue,Reason:StateReason,Actions:AlarmActions}' \
    --output json 2>/dev/null)

if [ "$ALARMS" = "[]" ] || [ -z "$ALARMS" ]; then
    echo -e "${RED}‚ùå No se encontraron alarmas configuradas${NC}"
    ALARMS_STATUS="‚ùå No configuradas"
else
    echo -e "${GREEN}‚úÖ CloudWatch Alarms encontradas:${NC}"
    
    # Parsear y mostrar informaci√≥n de las alarmas
    ALARM_COUNT=$(echo $ALARMS | jq '. | length' 2>/dev/null)
    ACTIVE_ALARMS=0
    
    for i in $(seq 0 $((ALARM_COUNT - 1))); do
        ALARM_INFO=$(echo $ALARMS | jq -r ".[$i]" 2>/dev/null)
        ALARM_NAME=$(echo $ALARM_INFO | jq -r '.Name' 2>/dev/null)
        ALARM_STATE=$(echo $ALARM_INFO | jq -r '.State' 2>/dev/null)
        ALARM_REASON=$(echo $ALARM_INFO | jq -r '.Reason' 2>/dev/null)
        
        case $ALARM_STATE in
            "OK")
                echo -e "   ‚úÖ $ALARM_NAME: ${GREEN}$ALARM_STATE${NC}"
                ACTIVE_ALARMS=$((ACTIVE_ALARMS + 1))
                ;;
            "ALARM")
                echo -e "   üö® $ALARM_NAME: ${RED}$ALARM_STATE${NC}"
                echo "      Raz√≥n: $ALARM_REASON"
                ACTIVE_ALARMS=$((ACTIVE_ALARMS + 1))
                ;;
            "INSUFFICIENT_DATA")
                echo -e "   ‚ö†Ô∏è $ALARM_NAME: ${YELLOW}$ALARM_STATE${NC}"
                ACTIVE_ALARMS=$((ACTIVE_ALARMS + 1))
                ;;
            *)
                echo -e "   ‚ùì $ALARM_NAME: ${PURPLE}$ALARM_STATE${NC}"
                ;;
        esac
    done
    
    ALARMS_STATUS="‚úÖ Configuradas ($ALARM_COUNT alarmas)"
fi
echo ""

# Verificar m√©tricas CloudWatch
echo "=== Verificando M√©tricas en CloudWatch ==="

METRIC_EXISTS=$(aws cloudwatch list-metrics \
    --namespace "$METRIC_NAMESPACE" \
    --metric-name "$METRIC_NAME" \
    --profile "$PROFILE" \
    --region "$REGION" \
    --query 'Metrics[0].MetricName' \
    --output text 2>/dev/null)

if [ "$METRIC_EXISTS" = "$METRIC_NAME" ]; then
    echo -e "${GREEN}‚úÖ M√©trica '$METRIC_NAME' existe en namespace '$METRIC_NAMESPACE'${NC}"
    
    # Obtener estad√≠sticas recientes
    END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%S")
    START_TIME=$(date -u -d '24 hours ago' +"%Y-%m-%dT%H:%M:%S")
    
    METRIC_STATS=$(aws cloudwatch get-metric-statistics \
        --namespace "$METRIC_NAMESPACE" \
        --metric-name "$METRIC_NAME" \
        --start-time "$START_TIME" \
        --end-time "$END_TIME" \
        --period 3600 \
        --statistics Sum \
        --profile "$PROFILE" \
        --region "$REGION" \
        --query 'Datapoints[].Sum' \
        --output text 2>/dev/null)
    
    if [ ! -z "$METRIC_STATS" ] && [ "$METRIC_STATS" != "None" ]; then
        TOTAL_EVENTS=$(echo $METRIC_STATS | tr ' ' '+' | bc 2>/dev/null || echo "0")
        echo "   üìä Eventos KMS detectados en las √∫ltimas 24 horas: $TOTAL_EVENTS"
        if [ "$TOTAL_EVENTS" -gt 0 ]; then
            echo -e "   ${BLUE}‚ÑπÔ∏è Actividad KMS reciente detectada${NC}"
        fi
        METRICS_STATUS="‚úÖ Activas con datos"
    else
        echo "   üìä No hay eventos KMS en las √∫ltimas 24 horas"
        METRICS_STATUS="‚úÖ Activas sin eventos recientes"
    fi
else
    echo -e "${RED}‚ùå M√©trica '$METRIC_NAME' no encontrada${NC}"
    METRICS_STATUS="‚ùå No configuradas"
fi
echo ""

# Resumen de estado
echo "=================================================================="
echo -e "${BLUE}üìä RESUMEN DEL ESTADO CIS 3.7${NC}"
echo "=================================================================="
echo "Perfil: $PROFILE (Account: $ACCOUNT_ID)"
echo "Regla: CIS 3.7 - KMS Customer Master Key Actions Monitoring"
echo ""
echo "üìã COMPONENTES VERIFICADOS:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo -e "SNS Topic:           $SNS_STATUS"
echo -e "KMS Keys:           $KMS_STATUS"
echo -e "Metric Filters:      $FILTERS_STATUS"
echo -e "CloudWatch Alarms:   $ALARMS_STATUS"
echo -e "M√©tricas:           $METRICS_STATUS"
echo ""

# Determinar estado general
if [[ $SNS_STATUS == *"‚úÖ"* ]] && [[ $FILTERS_STATUS == *"‚úÖ"* ]] && [[ $ALARMS_STATUS == *"‚úÖ"* ]] && [[ $METRICS_STATUS == *"‚úÖ"* ]]; then
    echo -e "${GREEN}üéâ ESTADO GENERAL: ‚úÖ COMPLETAMENTE CONFIGURADO${NC}"
    echo ""
    echo -e "${BLUE}üõ°Ô∏è PROTECCI√ìN ACTIVA:${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "‚Ä¢ Monitoreo activo de acciones cr√≠ticas en KMS CMK"
    echo "‚Ä¢ Detecci√≥n autom√°tica de cambios en keys de cifrado"
    echo "‚Ä¢ Alertas inmediatas ante modificaciones no autorizadas"
    echo "‚Ä¢ Cumplimiento con CIS AWS Benchmark 3.7"
elif [[ $SNS_STATUS == *"‚ùå"* ]] || [[ $FILTERS_STATUS == *"‚ùå"* ]] || [[ $ALARMS_STATUS == *"‚ùå"* ]]; then
    echo -e "${RED}‚ö†Ô∏è ESTADO GENERAL: ‚ùå CONFIGURACI√ìN INCOMPLETA${NC}"
    echo ""
    echo -e "${YELLOW}üîß ACCIONES REQUERIDAS:${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    if [[ $SNS_STATUS == *"‚ùå"* ]]; then
        echo "‚Ä¢ Configurar SNS Topic para notificaciones"
    fi
    if [[ $FILTERS_STATUS == *"‚ùå"* ]]; then
        echo "‚Ä¢ Configurar Metric Filters en CloudTrail log groups"
    fi
    if [[ $ALARMS_STATUS == *"‚ùå"* ]]; then
        echo "‚Ä¢ Configurar CloudWatch Alarms"
    fi
    echo ""
    echo "üí° Ejecutar: ./setup-kms-cmk-actions-monitoring.sh"
else
    echo -e "${YELLOW}‚ö†Ô∏è ESTADO GENERAL: üîÑ CONFIGURACI√ìN PARCIAL${NC}"
    echo ""
    echo -e "${BLUE}üìã REVISI√ìN RECOMENDADA:${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "‚Ä¢ Algunos componentes est√°n configurados correctamente"
    echo "‚Ä¢ Revisar elementos marcados con ‚ö†Ô∏è"
    echo "‚Ä¢ Completar configuraci√≥n faltante si es necesario"
fi

echo ""
echo -e "${BLUE}üîç EVENTOS KMS MONITOREADOS:${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚Ä¢ CreateKey - Creaci√≥n de nuevas Customer Master Keys"
echo "‚Ä¢ ScheduleKeyDeletion - Programaci√≥n de eliminaci√≥n de keys"
echo "‚Ä¢ DisableKey/EnableKey - Cambios de estado de keys"
echo "‚Ä¢ PutKeyPolicy - Modificaci√≥n de pol√≠ticas de keys"
echo "‚Ä¢ CreateAlias/DeleteAlias/UpdateAlias - Gesti√≥n de alias"
echo ""
echo -e "${YELLOW}üí° PR√ìXIMOS PASOS SUGERIDOS:${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "1. Confirmar suscripci√≥n de email en SNS si est√° pendiente"
echo "2. Establecer procedimientos de respuesta para eventos KMS cr√≠ticos"
echo "3. Probar notificaciones con operaciones controladas"
echo "4. Implementar esta configuraci√≥n en otros perfiles/regiones"
echo "5. Revisar regularmente las alertas y patrones de uso KMS"
echo "6. Documentar pol√≠ticas de respuesta ante cambios no autorizados"
echo ""
echo -e "${RED}üö® IMPORTANTE - RESPUESTA A ALERTAS KMS:${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚Ä¢ ScheduleKeyDeletion: Investigar inmediatamente, puede ser malicioso"
echo "‚Ä¢ PutKeyPolicy: Validar cambios de permisos en keys cr√≠ticas"
echo "‚Ä¢ DisableKey: Verificar autorizaci√≥n antes de deshabilitar keys"
echo "‚Ä¢ CreateKey: Confirmar con equipo de seguridad si es necesaria"
echo "‚Ä¢ Documentar todos los cambios para auditor√≠a y compliance"
echo ""