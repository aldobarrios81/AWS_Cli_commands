#!/bin/bash
# verify-appsync-waf.sh
# Verificar configuraciones de AWS WAF para APIs AppSync
# Validar que todas las APIs GraphQL tengan protecci√≥n WAF

if [ $# -eq 0 ]; then
    echo "Uso: $0 [perfil]"
    echo "Perfiles disponibles: ancla, azbeacons, azcenit"
    exit 1
fi

# Configuraci√≥n del perfil
PROFILE="$1"
REGION="us-east-1"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

echo "=================================================================="
echo -e "${BLUE}üîç VERIFICACI√ìN WAF APPSYNC${NC}"
echo "=================================================================="
echo -e "Perfil: ${GREEN}$PROFILE${NC} | Regi√≥n: ${GREEN}$REGION${NC}"
echo ""

# Verificar credenciales
ACCOUNT_ID=$(aws sts get-caller-identity --profile "$PROFILE" --query Account --output text 2>/dev/null)
if [ $? -ne 0 ] || [ -z "$ACCOUNT_ID" ]; then
    echo -e "${RED}‚ùå Error: Credenciales no v√°lidas para perfil '$PROFILE'${NC}"
    exit 1
fi

echo -e "‚úÖ Account ID: ${GREEN}$ACCOUNT_ID${NC}"
echo ""

# Variables de conteo
TOTAL_APIS=0
PROTECTED_APIS=0
UNPROTECTED_APIS=0
TOTAL_WAF_ACLS=0

# Verificar disponibilidad de servicios
echo -e "${PURPLE}üîç Verificando disponibilidad de servicios...${NC}"

# Verificar AppSync
APPSYNC_TEST=$(aws appsync list-graphql-apis --profile "$PROFILE" --region "$REGION" --max-results 1 2>/dev/null)
if [ $? -ne 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è AppSync no disponible en regi√≥n $REGION${NC}"
    
    # Verificar otras regiones principales
    MAIN_REGIONS=("us-west-2" "eu-west-1" "ap-southeast-1")
    for region in "${MAIN_REGIONS[@]}"; do
        echo -e "   üîç Verificando regi√≥n: ${BLUE}$region${NC}"
        TEST_RESULT=$(aws appsync list-graphql-apis --profile "$PROFILE" --region "$region" --max-results 1 2>/dev/null)
        
        if [ $? -eq 0 ]; then
            echo -e "   ‚úÖ AppSync disponible en: ${GREEN}$region${NC}"
            REGION="$region"
            break
        else
            echo -e "   ‚ùå No disponible en: $region"
        fi
    done
fi

# Verificar WAFv2
WAFV2_TEST=$(aws wafv2 list-web-acls --scope REGIONAL --profile "$PROFILE" --region "$REGION" --max-items 1 2>/dev/null)
if [ $? -ne 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è WAFv2 no disponible o sin permisos${NC}"
fi

echo ""

# An√°lisis de Web ACLs existentes
echo -e "${PURPLE}=== An√°lisis de Web ACLs WAF ===${NC}"

# Obtener lista de Web ACLs
WAF_ACLS=$(aws wafv2 list-web-acls --scope REGIONAL --profile "$PROFILE" --region "$REGION" --query 'WebACLs[].[Name,Id,ARN]' --output text 2>/dev/null)

if [ $? -ne 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Error al obtener Web ACLs${NC}"
elif [ -z "$WAF_ACLS" ] || [ "$WAF_ACLS" == "None" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è No se encontraron Web ACLs WAF${NC}"
    TOTAL_WAF_ACLS=0
else
    echo -e "${GREEN}üìä Web ACLs encontrados:${NC}"
    
    while IFS=$'\t' read -r acl_name acl_id acl_arn; do
        if [ -n "$acl_name" ] && [ "$acl_name" != "None" ]; then
            TOTAL_WAF_ACLS=$((TOTAL_WAF_ACLS + 1))
            echo -e "${CYAN}üõ°Ô∏è Web ACL: $acl_name${NC}"
            echo -e "   üÜî ID: ${BLUE}$acl_id${NC}"
            
            # Verificar recursos asociados
            ASSOCIATED_RESOURCES=$(aws wafv2 list-resources-for-web-acl --web-acl-arn "$acl_arn" --profile "$PROFILE" --region "$REGION" --query 'ResourceArns[]' --output text 2>/dev/null)
            
            if [ -n "$ASSOCIATED_RESOURCES" ] && [ "$ASSOCIATED_RESOURCES" != "None" ]; then
                RESOURCE_COUNT=$(echo "$ASSOCIATED_RESOURCES" | wc -w)
                echo -e "   üîó Recursos asociados: ${GREEN}$RESOURCE_COUNT${NC}"
                
                # Verificar si hay APIs AppSync asociadas
                APPSYNC_RESOURCES=$(echo "$ASSOCIATED_RESOURCES" | grep -o "arn:aws:appsync:[^:]*:[^:]*:apis/[^[:space:]]*" | wc -l)
                if [ $APPSYNC_RESOURCES -gt 0 ]; then
                    echo -e "   üì± APIs AppSync protegidas: ${GREEN}$APPSYNC_RESOURCES${NC}"
                fi
            else
                echo -e "   üîó Recursos asociados: ${YELLOW}Ninguno${NC}"
            fi
            
            # Verificar reglas configuradas
            WEB_ACL_DETAILS=$(aws wafv2 get-web-acl --scope REGIONAL --id "$acl_id" --name "$acl_name" --profile "$PROFILE" --region "$REGION" --query 'WebACL.Rules[].Name' --output text 2>/dev/null)
            
            if [ -n "$WEB_ACL_DETAILS" ] && [ "$WEB_ACL_DETAILS" != "None" ]; then
                RULE_COUNT=$(echo "$WEB_ACL_DETAILS" | wc -w)
                echo -e "   üìã Reglas configuradas: ${BLUE}$RULE_COUNT${NC}"
                
                # Verificar reglas espec√≠ficas de seguridad
                if echo "$WEB_ACL_DETAILS" | grep -q "AWSManagedRulesCommonRuleSet"; then
                    echo -e "      ‚úÖ Common Rule Set"
                fi
                if echo "$WEB_ACL_DETAILS" | grep -q "AWSManagedRulesKnownBadInputsRuleSet"; then
                    echo -e "      ‚úÖ Known Bad Inputs"
                fi
                if echo "$WEB_ACL_DETAILS" | grep -q "AWSManagedRulesAmazonIpReputationList"; then
                    echo -e "      ‚úÖ IP Reputation List"
                fi
                if echo "$WEB_ACL_DETAILS" | grep -q "RateLimit"; then
                    echo -e "      ‚úÖ Rate Limiting"
                fi
            fi
            echo ""
        fi
    done <<< "$WAF_ACLS"
fi

# An√°lisis de APIs AppSync
echo -e "${PURPLE}=== An√°lisis de APIs AppSync ===${NC}"

# Obtener lista de APIs GraphQL
GRAPHQL_APIS=$(aws appsync list-graphql-apis --profile "$PROFILE" --region "$REGION" --query 'graphqlApis[].[apiId,name,authenticationType,arn]' --output text 2>/dev/null)

if [ $? -ne 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Error al obtener APIs AppSync${NC}"
elif [ -z "$GRAPHQL_APIS" ] || [ "$GRAPHQL_APIS" == "None" ]; then
    echo -e "${GREEN}‚úÖ No se encontraron APIs AppSync GraphQL${NC}"
    TOTAL_APIS=0
else
    echo -e "${GREEN}üìä APIs AppSync encontradas:${NC}"
    
    while IFS=$'\t' read -r api_id api_name auth_type api_arn; do
        if [ -n "$api_id" ] && [ "$api_id" != "None" ]; then
            TOTAL_APIS=$((TOTAL_APIS + 1))
            echo -e "${CYAN}üì± API: $api_name${NC}"
            echo -e "   üÜî API ID: ${BLUE}$api_id${NC}"
            echo -e "   üîê Autenticaci√≥n: ${BLUE}$auth_type${NC}"
            
            # Verificar estado de protecci√≥n WAF
            WAF_PROTECTION=$(aws wafv2 get-web-acl-for-resource --resource-arn "$api_arn" --profile "$PROFILE" --region "$REGION" --output json 2>/dev/null)
            
            if [ $? -eq 0 ] && [ "$WAF_PROTECTION" != "null" ]; then
                WAF_NAME=$(echo "$WAF_PROTECTION" | jq -r '.WebACL.Name' 2>/dev/null)
                WAF_ID=$(echo "$WAF_PROTECTION" | jq -r '.WebACL.Id' 2>/dev/null)
                
                echo -e "   ‚úÖ Protecci√≥n WAF: ${GREEN}$WAF_NAME${NC}"
                echo -e "   üõ°Ô∏è WAF ID: ${BLUE}$WAF_ID${NC}"
                PROTECTED_APIS=$((PROTECTED_APIS + 1))
                
                # Verificar m√©tricas WAF
                BLOCKED_REQUESTS=$(aws cloudwatch get-metric-statistics \
                    --namespace AWS/WAFV2 \
                    --metric-name BlockedRequests \
                    --dimensions Name=WebACL,Value="$WAF_NAME" Name=Region,Value="$REGION" \
                    --start-time "$(date -d '24 hours ago' -Iseconds)" \
                    --end-time "$(date -Iseconds)" \
                    --period 86400 \
                    --statistics Sum \
                    --profile "$PROFILE" \
                    --region "$REGION" \
                    --query 'Datapoints[0].Sum' \
                    --output text 2>/dev/null)
                
                if [ -n "$BLOCKED_REQUESTS" ] && [ "$BLOCKED_REQUESTS" != "None" ] && [ "$BLOCKED_REQUESTS" != "null" ]; then
                    echo -e "   üìä Requests bloqueados (24h): ${YELLOW}$BLOCKED_REQUESTS${NC}"
                else
                    echo -e "   üìä Requests bloqueados (24h): ${GREEN}0${NC}"
                fi
                
            else
                echo -e "   ‚ùå Protecci√≥n WAF: ${RED}NO CONFIGURADA${NC}"
                UNPROTECTED_APIS=$((UNPROTECTED_APIS + 1))
            fi
            
            # Verificar configuraciones adicionales de seguridad
            echo -e "   üîç Verificando configuraciones adicionales..."
            
            # Verificar logging de API
            API_LOGGING=$(aws appsync get-graphql-api --api-id "$api_id" --profile "$PROFILE" --region "$REGION" --query 'graphqlApi.logConfig.cloudWatchLogsRoleArn' --output text 2>/dev/null)
            
            if [ -n "$API_LOGGING" ] && [ "$API_LOGGING" != "None" ] && [ "$API_LOGGING" != "null" ]; then
                echo -e "      ‚úÖ API Logging habilitado"
            else
                echo -e "      ‚ö†Ô∏è API Logging: ${YELLOW}No configurado${NC}"
            fi
            
            # Verificar configuraci√≥n de endpoint
            API_URIS=$(aws appsync get-graphql-api --api-id "$api_id" --profile "$PROFILE" --region "$REGION" --query 'graphqlApi.uris' --output json 2>/dev/null)
            
            if [ -n "$API_URIS" ] && [ "$API_URIS" != "null" ]; then
                GRAPHQL_URI=$(echo "$API_URIS" | jq -r '.GRAPHQL // empty' 2>/dev/null)
                if [ -n "$GRAPHQL_URI" ]; then
                    echo -e "      üåê Endpoint GraphQL: ${BLUE}$GRAPHQL_URI${NC}"
                fi
            fi
            
            echo ""
        fi
    done <<< "$GRAPHQL_APIS"
fi

# Verificar configuraci√≥n de logging WAF
echo -e "${PURPLE}=== Configuraci√≥n de Logging WAF ===${NC}"

if [ $TOTAL_WAF_ACLS -gt 0 ]; then
    # Verificar log groups WAF
    WAF_LOG_GROUPS=$(aws logs describe-log-groups --log-group-name-prefix "/aws/wafv2" --profile "$PROFILE" --region "$REGION" --query 'logGroups[].logGroupName' --output text 2>/dev/null)
    
    if [ -n "$WAF_LOG_GROUPS" ] && [ "$WAF_LOG_GROUPS" != "None" ]; then
        LOG_GROUP_COUNT=$(echo "$WAF_LOG_GROUPS" | wc -w)
        echo -e "‚úÖ Log groups WAF encontrados: ${GREEN}$LOG_GROUP_COUNT${NC}"
        
        for log_group in $WAF_LOG_GROUPS; do
            echo -e "   üìù $log_group"
            
            # Verificar retenci√≥n
            RETENTION=$(aws logs describe-log-groups --log-group-name-prefix "$log_group" --profile "$PROFILE" --region "$REGION" --query 'logGroups[0].retentionInDays' --output text 2>/dev/null)
            
            if [ -n "$RETENTION" ] && [ "$RETENTION" != "None" ]; then
                echo -e "      üìÖ Retenci√≥n: ${BLUE}$RETENTION d√≠as${NC}"
            else
                echo -e "      üìÖ Retenci√≥n: ${YELLOW}Sin l√≠mite${NC}"
            fi
        done
    else
        echo -e "‚ö†Ô∏è Log groups WAF: ${YELLOW}No configurados${NC}"
    fi
else
    echo -e "‚ö†Ô∏è No hay Web ACLs para verificar logging"
fi

echo ""

# Verificar alarmas CloudWatch
echo -e "${PURPLE}=== Alarmas CloudWatch WAF ===${NC}"

WAF_ALARMS=$(aws cloudwatch describe-alarms --alarm-name-prefix "AppSync-WAF" --profile "$PROFILE" --region "$REGION" --query 'MetricAlarms[].[AlarmName,StateValue,MetricName]' --output text 2>/dev/null)

if [ -n "$WAF_ALARMS" ] && [ "$WAF_ALARMS" != "None" ]; then
    ALARM_COUNT=$(echo "$WAF_ALARMS" | wc -l)
    echo -e "‚úÖ Alarmas WAF encontradas: ${GREEN}$ALARM_COUNT${NC}"
    
    while IFS=$'\t' read -r alarm_name alarm_state metric_name; do
        if [ -n "$alarm_name" ]; then
            echo -e "   üö® $alarm_name"
            echo -e "      üìä M√©trica: ${BLUE}$metric_name${NC}"
            
            if [ "$alarm_state" == "OK" ]; then
                echo -e "      ‚úÖ Estado: ${GREEN}$alarm_state${NC}"
            elif [ "$alarm_state" == "ALARM" ]; then
                echo -e "      üö® Estado: ${RED}$alarm_state${NC}"
            else
                echo -e "      ‚ö†Ô∏è Estado: ${YELLOW}$alarm_state${NC}"
            fi
        fi
    done <<< "$WAF_ALARMS"
else
    echo -e "‚ö†Ô∏è Alarmas WAF: ${YELLOW}No configuradas${NC}"
fi

echo ""

# Generar reporte de verificaci√≥n
VERIFICATION_REPORT="appsync-waf-verification-$PROFILE-$(date +%Y%m%d-%H%M).json"

cat > "$VERIFICATION_REPORT" << EOF
{
  "verification_timestamp": "$(date -Iseconds)",
  "profile": "$PROFILE",
  "region": "$REGION",
  "account_id": "$ACCOUNT_ID",
  "summary": {
    "total_appsync_apis": $TOTAL_APIS,
    "protected_apis": $PROTECTED_APIS,
    "unprotected_apis": $UNPROTECTED_APIS,
    "total_waf_acls": $TOTAL_WAF_ACLS,
    "protection_compliance": "$(if [ $TOTAL_APIS -eq 0 ]; then echo "NO_APIS"; elif [ $UNPROTECTED_APIS -eq 0 ]; then echo "FULLY_COMPLIANT"; else echo "NON_COMPLIANT"; fi)"
  },
  "recommendations": [
    "Configurar WAF para todas las APIs AppSync",
    "Implementar reglas managed de AWS en WAF",
    "Configurar rate limiting apropiado",
    "Habilitar logging WAF para an√°lisis",
    "Crear alarmas CloudWatch para monitoreo",
    "Revisar m√©tricas de requests bloqueados regularmente"
  ]
}
EOF

echo -e "üìä Reporte de verificaci√≥n generado: ${GREEN}$VERIFICATION_REPORT${NC}"

# Resumen final
echo ""
echo -e "${PURPLE}=== RESUMEN VERIFICACI√ìN WAF APPSYNC ===${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo -e "üîê Account: ${GREEN}$ACCOUNT_ID${NC} | Regi√≥n: ${GREEN}$REGION${NC}"
echo -e "üõ°Ô∏è Web ACLs WAF: ${GREEN}$TOTAL_WAF_ACLS${NC}"
echo -e "üì± APIs AppSync: ${GREEN}$TOTAL_APIS${NC}"

if [ $TOTAL_APIS -gt 0 ]; then
    echo -e "‚úÖ APIs protegidas: ${GREEN}$PROTECTED_APIS${NC}"
    if [ $UNPROTECTED_APIS -gt 0 ]; then
        echo -e "‚ùå APIs sin protecci√≥n: ${RED}$UNPROTECTED_APIS${NC}"
    fi
    
    # Calcular porcentaje de protecci√≥n
    if [ $TOTAL_APIS -gt 0 ]; then
        PROTECTION_PERCENT=$((PROTECTED_APIS * 100 / TOTAL_APIS))
        echo -e "üìà Cobertura WAF: ${GREEN}$PROTECTION_PERCENT%${NC}"
    fi
fi

echo ""

# Estado final
if [ $TOTAL_APIS -eq 0 ]; then
    if [ $TOTAL_WAF_ACLS -gt 0 ]; then
        echo -e "${GREEN}‚úÖ ESTADO: WAF CONFIGURADO, SIN APIS${NC}"
        echo -e "${BLUE}üí° Protecci√≥n WAF lista para futuras APIs AppSync${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è ESTADO: SIN APIS NI WAF${NC}"
        echo -e "${BLUE}üí° No hay APIs AppSync para proteger${NC}"
    fi
elif [ $UNPROTECTED_APIS -eq 0 ]; then
    echo -e "${GREEN}üéâ ESTADO: COMPLETAMENTE PROTEGIDO${NC}"
    echo -e "${BLUE}üí° Todas las APIs AppSync tienen protecci√≥n WAF${NC}"
elif [ $PROTECTED_APIS -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è ESTADO: PROTECCI√ìN PARCIAL${NC}"
    echo -e "${YELLOW}üí° Ejecutar: ./enable-appsync-waf.sh $PROFILE${NC}"
else
    echo -e "${RED}‚ùå ESTADO: SIN PROTECCI√ìN WAF${NC}"
    echo -e "${YELLOW}üí° Ejecutar: ./enable-appsync-waf.sh $PROFILE${NC}"
fi

echo -e "üìã Reporte: ${GREEN}$VERIFICATION_REPORT${NC}"